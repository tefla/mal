Index: tisp.g4
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\ngrammar tisp;\n\ntisp: s_expr+ EOF;\n\ns_expr\n  : (list | array | map)\n  | atom\n  ;\nlist\n  : '(' s_expr* ')'\n  ;\narray\n  : '[' s_expr* ']'\n  ;\nmap\n  : '{' s_expr* '}'\n  ;\natom\n  : ID        #id\n  | NUMBER    #number\n  | STRING    #string\n  | OP        #op\n  | key       #atomKey\n  ;\nkey: ':' ID;\nID: [_a-zA-Z]+ [a-zA-Z0-9-_]*;\nNUMBER\n  : '-'? ([0-9]* '.')? [0-9]+\n  ;\nSTRING\n  : '\"' (~[\"])* '\"'\n  ;\nOP\n  : '+' | '-' | '*' | '/' | '%' | '^'\n  | '=' | '!=' | '<' | '<=' | '>' | '>='\n  | '&&' | '||' | '!' | '->' | '-->>'\n  | '++' | '--'\n  | '<<' | '>>' | '>>>' | '<<<'\n  | '&' | '|' | '~'\n  ;\nWS\n  : (\n    [ \\t\\n\\r,]+ | ';' ~[\\r\\n]*\n  )-> skip;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tisp.g4 b/tisp.g4
--- a/tisp.g4	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ b/tisp.g4	(date 1721316685404)
@@ -4,8 +4,8 @@
 tisp: s_expr+ EOF;
 
 s_expr
-  : (list | array | map)
-  | atom
+  : (list | array | map) #sexprList
+  | atom                 #sexprAtom
   ;
 list
   : '(' s_expr* ')'
Index: step1_read_print.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {read_str, read_str_antlr} from \"./reader.ts\";\nimport {pr_str, pr_str_antlr} from \"./printer.ts\";\n\nconst READ = (str: string): any => read_str_antlr(str);\nconst EVAL = (ast: any, _env?: any): any => ast;\nconst PRINT = (exp: any): string => pr_str_antlr(exp)\nconst rep = (str: string): string => PRINT(EVAL(READ(str)));\n\nconst repl = async () => {\n  const prompt = \"user> \";\n  process.stdout.write(prompt);\n  for await (const line of console) {\n    if(line.length === 0) {\n      break;\n    }\n    try{\n      process.stdout.write(rep(line));\n      process.stdout.write(\"\\n\");\n    } catch(e) {\n      const err: Error = e;\n      process.stdout.write(err.message);\n    }\n    process.stdout.write(prompt);\n  }\n}\nrepl();\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/step1_read_print.ts b/step1_read_print.ts
--- a/step1_read_print.ts	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ b/step1_read_print.ts	(date 1721316161035)
@@ -16,7 +16,7 @@
     try{
       process.stdout.write(rep(line));
       process.stdout.write("\n");
-    } catch(e) {
+    } catch(e: any) {
       const err: Error = e;
       process.stdout.write(err.message);
     }
Index: printer.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tispVisitor from \"./parser/tispVisitor.ts\";\nimport type {RuleNode, TerminalNode} from \"antlr4\";\nimport type {TispContext} from \"./parser/tispParser.ts\";\nimport {\n  ArrayContext,\n  AtomContext,\n   IdContext,\n  ListContext,\n  MapContext, NumberContext, OpContext,\n  S_exprContext,\n\n} from \"./parser/tispParser.ts\";\n\n\nexport const pr_str = (exp: any): string => {\n  if(exp instanceof Array) {\n    return `( ${exp.map(pr_str).join(\" \")} )`;\n  }\n  return exp.toString();\n}\nabstract class AstNode {\n  abstract toString(): string;\n  abstract eval(): any;\n}\nconst context = {\n  '+': (a: number, b: number) => a + b,\n  '-': (a: number, b: number) => a - b,\n  '*': (a: number, b: number) => a * b,\n  '/': (a: number, b: number) => a / b,\n};\n\nclass AtomNode extends AstNode {\n  constructor(public value: any) {\n    super();\n  }\n  toString() {\n    return this.value;\n  }\n  eval() {\n    console.log(\"VALUE\", this.value, typeof this.value)\n    return this.value;\n  }\n}\nclass ListNode extends AstNode {\n  constructor(public elements: AstNode[]) {\n    super();\n  }\n  toString() {\n    return `(${this.elements.map(node => node.toString()).join(\" \")})`;\n  }\n  eval() {\n      // Get the first element of the list\n      const fn = context[this.elements[0].eval()];\n      // Get the rest of the elements\n      const args = this.elements.slice(1).map(node => node.eval());\n      console.log(\"ARGS\", args)\n      return fn(...args);\n  }\n}\nclass ArrayNode extends AstNode {\n  constructor(public elements: AstNode[]) {\n    super();\n  }\n  toString() {\n    return `[ ${this.elements.map(node => node.toString()).join(\" \")} ]`;\n  }\n  eval() {\n    return this.elements.map(node => node.eval());\n  }\n}\nclass MapNode extends AstNode {\n  constructor(public elements: AstNode[]) {\n    super();\n  }\n  toString() {\n    return `{ ${this.elements.map(node => node.toString()).join(\" \")} }`;\n  }\n  eval() {\n    return this.elements.map(node => node.eval());\n  }\n}\nclass KeyNode extends AstNode {\n  constructor(public key: string, public value: AstNode) {\n    super();\n  }\n  toString() {\n    return `${this.key} ${this.value.toString()}`;\n  }\n  eval(): any {\n    return { [this.key]: this.value.eval() };\n  }\n}\nclass TispNode extends AstNode {\n  constructor(public s_expr_list: AstNode[]) {\n    super();\n  }\n  toString() {\n    return this.s_expr_list.map(node => node.toString()).join(\" \");\n  }\n  eval() {\n    return this.s_expr_list.map(node => node.eval());\n  }\n}\nclass SExprNode extends AstNode {\n  constructor(public children: AstNode[]) {\n    super();\n  }\n\n  toString() {\n    return this.children.map(node => node.toString()).join(\" \");\n  }\n  eval(): any {\n    return this.children.map(node => node.eval());\n\n  }\n}\n\nclass AstVisitor extends tispVisitor<AstNode> {\n  visitTisp = (ctx: TispContext): TispNode =>{\n    return new TispNode(ctx.s_expr_list().map(exp => this.visit(exp)));\n  }\n\n  visitList = (ctx: ListContext): ListNode => {\n    return new ListNode(ctx.s_expr_list().map(child => this.visit(child)))\n  }\n  visitArray = (ctx: ArrayContext): ArrayNode => {\n    return new ArrayNode(ctx.s_expr_list().map(child => this.visit(child)))\n  }\n  visitMap = (ctx: MapContext): MapNode => {\n    return new MapNode(ctx.s_expr_list().map(child => this.visit(child)))\n  }\n  visitS_expr = (ctx: S_exprContext): SExprNode => {\n    return new SExprNode(ctx.children.map(child => this.visit(child)));\n  }\n  visitId= (ctx: IdContext): AtomNode => {\n    return new AtomNode(ctx.getText());\n  }\n  visitNumber = (ctx: NumberContext): AtomNode => {\n    const numStr = ctx.getText();\n    if(numStr.includes(\".\")) {\n      return new AtomNode(parseFloat(numStr));\n    } else {\n      return new AtomNode(parseInt(numStr));\n    }\n  }\n  visitOp = (ctx: OpContext): AtomNode => {\n    return new AtomNode(ctx.getText());\n  }\n}\n\nexport const pr_str_antlr = (exp: any) => {\n  const ast = new AstVisitor();\n  const node = ast.visit(exp);\n  const res = node.eval();\n  console.log(res)\n  console.log(node.toString())\n  return res\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/printer.ts b/printer.ts
--- a/printer.ts	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ b/printer.ts	(date 1721316882708)
@@ -1,6 +1,6 @@
 import tispVisitor from "./parser/tispVisitor.ts";
-import type {RuleNode, TerminalNode} from "antlr4";
-import type {TispContext} from "./parser/tispParser.ts";
+
+import {SexprAtomContext, type TispContext} from "./parser/tispParser.ts";
 import {
   ArrayContext,
   AtomContext,
@@ -132,6 +132,9 @@
   visitS_expr = (ctx: S_exprContext): SExprNode => {
     return new SExprNode(ctx.children.map(child => this.visit(child)));
   }
+  visitSexprAtom = (ctx: SexprAtomContext) => {
+    return this.visit(ctx.atom())
+  }
   visitId= (ctx: IdContext): AtomNode => {
     return new AtomNode(ctx.getText());
   }
Index: reader.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import antlr4 from \"antlr4\";\nimport tispLexer from \"./parser/tispLexer.ts\";\nimport tispParser from \"./parser/tispParser.ts\";\n\n\nclass Reader {\n  private pos = 0;\n  constructor(private tokens: string[]) {  }\n  next(){\n    const ret = this.peek();\n    this.pos += 1;\n    return ret;\n  }\n  peek(){\n    return this.tokens[this.pos];\n  }\n}\nexport const read_str_antlr = (input: string) => {\n  const chars = new antlr4.CharStream(input);\n  const lexer = new tispLexer(chars);\n  const tokens = new antlr4.CommonTokenStream(lexer);\n  const parser = new tispParser(tokens);\n  const tree = parser.tisp();\n  return tree;\n}\nexport const read_str = (input: string) => {\n  const tokens = tokenize(input);\n  const reader = new Reader(tokens);\n  return read_form(reader);\n}\n\nconst tokenize = (input: string) => {\n  const tok_regex = /[\\s,]*(~@|[\\[\\]{}()'`~^@]|\"(?:\\\\.|[^\\\\\"])*\"?|;.*|[^\\s\\[\\]{}('\"`,;)]*)/;\n  const tokens: string[] = [];\n  while(true) {\n    const matches = input.match(tok_regex);\n    if(!matches) {\n      break;\n    }\n    const match = matches[1];\n    if(match === \"\") {\n      break;\n    }\n    if(match[0] !== \";\") {\n      tokens.push(match);\n    }\n    input = input.slice(matches[0].length);\n  }\n  return tokens;\n}\n\nconst read_form = (reader: Reader) => {\n  const token = reader.peek();\n  switch(token) {\n    case '(':\n      return read_list(reader, ')');\n    case '[':\n      return read_list(reader, ']');\n    case '{':\n      return read_list(reader, '}');\n    case ')':\n      throw new Error(\"unexpected ')'\");\n    case ']':\n      throw new Error(\"unexpected ']'\");\n    case '}':\n      throw new Error(\"unexpected '}'\");\n    default:\n      return read_atom(reader);\n  }\n}\nconst read_list = (reader: Reader, close: string) => {\n  const token = reader.next();\n\n  const ast = [];\n  while(reader.peek() !== close) {\n    if(reader.peek() === undefined) {\n      throw new Error(\"unbalanced\");\n    }\n    ast.push(read_form(reader));\n  }\n  reader.next();\n  return ast;\n}\n\nconst read_atom = (reader: Reader) => {\n  const token = reader.next();\n  if(token.match(/^-?[0-9]+$/)) {\n    return parseInt(token);\n  } else {\n    return token;\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/reader.ts b/reader.ts
--- a/reader.ts	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ b/reader.ts	(date 1721316200745)
@@ -16,9 +16,9 @@
   }
 }
 export const read_str_antlr = (input: string) => {
-  const chars = new antlr4.CharStream(input);
+  const chars = antlr4.CharStreams.fromString(input);
   const lexer = new tispLexer(chars);
-  const tokens = new antlr4.CommonTokenStream(lexer);
+  const tokens = new antlr4.CommonTokenStream(lexer)
   const parser = new tispParser(tokens);
   const tree = parser.tisp();
   return tree;
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"tsbun\",\n  \"module\": \"index.ts\",\n  \"type\": \"module\",\n  \"devDependencies\": {\n    \"@types/bun\": \"latest\"\n  },\n  \"peerDependencies\": {\n    \"typescript\": \"^5.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"npm run test:step0 && npm run test:step1\",\n    \"test:step0\": \"cd ../.. && make 'test^tsbun^step0'\",\n    \"test:step1\": \"cd ../.. && make 'test^tsbun^step1'\"\n  },\n  \"dependencies\": {\n    \"@types/antlr4\": \"^4.11.6\",\n    \"antlr4\": \"^4.13.1-patch-1\"\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package.json b/package.json
--- a/package.json	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ b/package.json	(date 1721316200753)
@@ -9,12 +9,11 @@
     "typescript": "^5.0.0"
   },
   "scripts": {
-    "test": "npm run test:step0 && npm run test:step1",
+    "test": "bun run test:step0 && BUN run test:step1",
     "test:step0": "cd ../.. && make 'test^tsbun^step0'",
     "test:step1": "cd ../.. && make 'test^tsbun^step1'"
   },
   "dependencies": {
-    "@types/antlr4": "^4.11.6",
     "antlr4": "^4.13.1-patch-1"
   }
 }
\ No newline at end of file
Index: parser/tispLexer.interp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parser/tispLexer.interp b/parser/tispLexer.interp
deleted file mode 100644
--- a/parser/tispLexer.interp	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ /dev/null	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
@@ -1,53 +0,0 @@
-token literal names:
-null
-'('
-')'
-'['
-']'
-'{'
-'}'
-':'
-null
-null
-null
-null
-null
-
-token symbolic names:
-null
-null
-null
-null
-null
-null
-null
-null
-ID
-NUMBER
-STRING
-OP
-WS
-
-rule names:
-T__0
-T__1
-T__2
-T__3
-T__4
-T__5
-T__6
-ID
-NUMBER
-STRING
-OP
-WS
-
-channel names:
-DEFAULT_TOKEN_CHANNEL
-HIDDEN
-
-mode names:
-DEFAULT_MODE
-
-atn:
-[4, 0, 12, 129, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 4, 7, 41, 8, 7, 11, 7, 12, 7, 42, 1, 7, 5, 7, 46, 8, 7, 10, 7, 12, 7, 49, 9, 7, 1, 8, 3, 8, 52, 8, 8, 1, 8, 5, 8, 55, 8, 8, 10, 8, 12, 8, 58, 9, 8, 1, 8, 3, 8, 61, 8, 8, 1, 8, 4, 8, 64, 8, 8, 11, 8, 12, 8, 65, 1, 9, 1, 9, 5, 9, 70, 8, 9, 10, 9, 12, 9, 73, 9, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 112, 8, 10, 1, 11, 4, 11, 115, 8, 11, 11, 11, 12, 11, 116, 1, 11, 1, 11, 5, 11, 121, 8, 11, 10, 11, 12, 11, 124, 9, 11, 3, 11, 126, 8, 11, 1, 11, 1, 11, 0, 0, 12, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 1, 0, 8, 3, 0, 65, 90, 95, 95, 97, 122, 5, 0, 45, 45, 48, 57, 65, 90, 95, 95, 97, 122, 1, 0, 48, 57, 1, 0, 34, 34, 6, 0, 37, 37, 42, 43, 45, 45, 47, 47, 61, 61, 94, 94, 3, 0, 38, 38, 124, 124, 126, 126, 4, 0, 9, 10, 13, 13, 32, 32, 44, 44, 2, 0, 10, 10, 13, 13, 155, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 1, 25, 1, 0, 0, 0, 3, 27, 1, 0, 0, 0, 5, 29, 1, 0, 0, 0, 7, 31, 1, 0, 0, 0, 9, 33, 1, 0, 0, 0, 11, 35, 1, 0, 0, 0, 13, 37, 1, 0, 0, 0, 15, 40, 1, 0, 0, 0, 17, 51, 1, 0, 0, 0, 19, 67, 1, 0, 0, 0, 21, 111, 1, 0, 0, 0, 23, 125, 1, 0, 0, 0, 25, 26, 5, 40, 0, 0, 26, 2, 1, 0, 0, 0, 27, 28, 5, 41, 0, 0, 28, 4, 1, 0, 0, 0, 29, 30, 5, 91, 0, 0, 30, 6, 1, 0, 0, 0, 31, 32, 5, 93, 0, 0, 32, 8, 1, 0, 0, 0, 33, 34, 5, 123, 0, 0, 34, 10, 1, 0, 0, 0, 35, 36, 5, 125, 0, 0, 36, 12, 1, 0, 0, 0, 37, 38, 5, 58, 0, 0, 38, 14, 1, 0, 0, 0, 39, 41, 7, 0, 0, 0, 40, 39, 1, 0, 0, 0, 41, 42, 1, 0, 0, 0, 42, 40, 1, 0, 0, 0, 42, 43, 1, 0, 0, 0, 43, 47, 1, 0, 0, 0, 44, 46, 7, 1, 0, 0, 45, 44, 1, 0, 0, 0, 46, 49, 1, 0, 0, 0, 47, 45, 1, 0, 0, 0, 47, 48, 1, 0, 0, 0, 48, 16, 1, 0, 0, 0, 49, 47, 1, 0, 0, 0, 50, 52, 5, 45, 0, 0, 51, 50, 1, 0, 0, 0, 51, 52, 1, 0, 0, 0, 52, 60, 1, 0, 0, 0, 53, 55, 7, 2, 0, 0, 54, 53, 1, 0, 0, 0, 55, 58, 1, 0, 0, 0, 56, 54, 1, 0, 0, 0, 56, 57, 1, 0, 0, 0, 57, 59, 1, 0, 0, 0, 58, 56, 1, 0, 0, 0, 59, 61, 5, 46, 0, 0, 60, 56, 1, 0, 0, 0, 60, 61, 1, 0, 0, 0, 61, 63, 1, 0, 0, 0, 62, 64, 7, 2, 0, 0, 63, 62, 1, 0, 0, 0, 64, 65, 1, 0, 0, 0, 65, 63, 1, 0, 0, 0, 65, 66, 1, 0, 0, 0, 66, 18, 1, 0, 0, 0, 67, 71, 5, 34, 0, 0, 68, 70, 8, 3, 0, 0, 69, 68, 1, 0, 0, 0, 70, 73, 1, 0, 0, 0, 71, 69, 1, 0, 0, 0, 71, 72, 1, 0, 0, 0, 72, 74, 1, 0, 0, 0, 73, 71, 1, 0, 0, 0, 74, 75, 5, 34, 0, 0, 75, 20, 1, 0, 0, 0, 76, 112, 7, 4, 0, 0, 77, 78, 5, 33, 0, 0, 78, 112, 5, 61, 0, 0, 79, 112, 5, 60, 0, 0, 80, 81, 5, 60, 0, 0, 81, 112, 5, 61, 0, 0, 82, 112, 5, 62, 0, 0, 83, 84, 5, 62, 0, 0, 84, 112, 5, 61, 0, 0, 85, 86, 5, 38, 0, 0, 86, 112, 5, 38, 0, 0, 87, 88, 5, 124, 0, 0, 88, 112, 5, 124, 0, 0, 89, 112, 5, 33, 0, 0, 90, 91, 5, 45, 0, 0, 91, 112, 5, 62, 0, 0, 92, 93, 5, 45, 0, 0, 93, 94, 5, 45, 0, 0, 94, 95, 5, 62, 0, 0, 95, 112, 5, 62, 0, 0, 96, 97, 5, 43, 0, 0, 97, 112, 5, 43, 0, 0, 98, 99, 5, 45, 0, 0, 99, 112, 5, 45, 0, 0, 100, 101, 5, 60, 0, 0, 101, 112, 5, 60, 0, 0, 102, 103, 5, 62, 0, 0, 103, 112, 5, 62, 0, 0, 104, 105, 5, 62, 0, 0, 105, 106, 5, 62, 0, 0, 106, 112, 5, 62, 0, 0, 107, 108, 5, 60, 0, 0, 108, 109, 5, 60, 0, 0, 109, 112, 5, 60, 0, 0, 110, 112, 7, 5, 0, 0, 111, 76, 1, 0, 0, 0, 111, 77, 1, 0, 0, 0, 111, 79, 1, 0, 0, 0, 111, 80, 1, 0, 0, 0, 111, 82, 1, 0, 0, 0, 111, 83, 1, 0, 0, 0, 111, 85, 1, 0, 0, 0, 111, 87, 1, 0, 0, 0, 111, 89, 1, 0, 0, 0, 111, 90, 1, 0, 0, 0, 111, 92, 1, 0, 0, 0, 111, 96, 1, 0, 0, 0, 111, 98, 1, 0, 0, 0, 111, 100, 1, 0, 0, 0, 111, 102, 1, 0, 0, 0, 111, 104, 1, 0, 0, 0, 111, 107, 1, 0, 0, 0, 111, 110, 1, 0, 0, 0, 112, 22, 1, 0, 0, 0, 113, 115, 7, 6, 0, 0, 114, 113, 1, 0, 0, 0, 115, 116, 1, 0, 0, 0, 116, 114, 1, 0, 0, 0, 116, 117, 1, 0, 0, 0, 117, 126, 1, 0, 0, 0, 118, 122, 5, 59, 0, 0, 119, 121, 8, 7, 0, 0, 120, 119, 1, 0, 0, 0, 121, 124, 1, 0, 0, 0, 122, 120, 1, 0, 0, 0, 122, 123, 1, 0, 0, 0, 123, 126, 1, 0, 0, 0, 124, 122, 1, 0, 0, 0, 125, 114, 1, 0, 0, 0, 125, 118, 1, 0, 0, 0, 126, 127, 1, 0, 0, 0, 127, 128, 6, 11, 0, 0, 128, 24, 1, 0, 0, 0, 12, 0, 42, 47, 51, 56, 60, 65, 71, 111, 116, 122, 125, 1, 6, 0, 0]
\ No newline at end of file
Index: parser/tispVisitor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parser/tispVisitor.ts b/parser/tispVisitor.ts
deleted file mode 100644
--- a/parser/tispVisitor.ts	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ /dev/null	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
@@ -1,99 +0,0 @@
-// Generated from /home/tim/dev/mal/impls/tsbun/tisp.g4 by ANTLR 4.13.1
-
-import {ParseTreeVisitor} from 'antlr4';
-
-
-import { TispContext } from "./tispParser";
-import { S_exprContext } from "./tispParser";
-import { ListContext } from "./tispParser";
-import { ArrayContext } from "./tispParser";
-import { MapContext } from "./tispParser";
-import { IdContext } from "./tispParser";
-import { NumberContext } from "./tispParser";
-import { StringContext } from "./tispParser";
-import { OpContext } from "./tispParser";
-import { AtomKeyContext } from "./tispParser";
-import { KeyContext } from "./tispParser";
-
-
-/**
- * This interface defines a complete generic visitor for a parse tree produced
- * by `tispParser`.
- *
- * @param <Result> The return type of the visit operation. Use `void` for
- * operations with no return type.
- */
-export default class tispVisitor<Result> extends ParseTreeVisitor<Result> {
-	/**
-	 * Visit a parse tree produced by `tispParser.tisp`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitTisp?: (ctx: TispContext) => Result;
-	/**
-	 * Visit a parse tree produced by `tispParser.s_expr`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitS_expr?: (ctx: S_exprContext) => Result;
-	/**
-	 * Visit a parse tree produced by `tispParser.list`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitList?: (ctx: ListContext) => Result;
-	/**
-	 * Visit a parse tree produced by `tispParser.array`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitArray?: (ctx: ArrayContext) => Result;
-	/**
-	 * Visit a parse tree produced by `tispParser.map`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitMap?: (ctx: MapContext) => Result;
-	/**
-	 * Visit a parse tree produced by the `id`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitId?: (ctx: IdContext) => Result;
-	/**
-	 * Visit a parse tree produced by the `number`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitNumber?: (ctx: NumberContext) => Result;
-	/**
-	 * Visit a parse tree produced by the `string`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitString?: (ctx: StringContext) => Result;
-	/**
-	 * Visit a parse tree produced by the `op`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitOp?: (ctx: OpContext) => Result;
-	/**
-	 * Visit a parse tree produced by the `atomKey`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitAtomKey?: (ctx: AtomKeyContext) => Result;
-	/**
-	 * Visit a parse tree produced by `tispParser.key`.
-	 * @param ctx the parse tree
-	 * @return the visitor result
-	 */
-	visitKey?: (ctx: KeyContext) => Result;
-}
-
Index: parser/tispLexer.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parser/tispLexer.ts b/parser/tispLexer.ts
deleted file mode 100644
--- a/parser/tispLexer.ts	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ /dev/null	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
@@ -1,125 +0,0 @@
-// Generated from /home/tim/dev/mal/impls/tsbun/tisp.g4 by ANTLR 4.13.1
-// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
-import {
-	ATN,
-	ATNDeserializer,
-	CharStream,
-	DecisionState, DFA,
-	Lexer,
-	LexerATNSimulator,
-	RuleContext,
-	PredictionContextCache,
-	Token
-} from "antlr4";
-export default class tispLexer extends Lexer {
-	public static readonly T__0 = 1;
-	public static readonly T__1 = 2;
-	public static readonly T__2 = 3;
-	public static readonly T__3 = 4;
-	public static readonly T__4 = 5;
-	public static readonly T__5 = 6;
-	public static readonly T__6 = 7;
-	public static readonly ID = 8;
-	public static readonly NUMBER = 9;
-	public static readonly STRING = 10;
-	public static readonly OP = 11;
-	public static readonly WS = 12;
-	public static readonly EOF = Token.EOF;
-
-	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
-	public static readonly literalNames: (string | null)[] = [ null, "'('", 
-                                                            "')'", "'['", 
-                                                            "']'", "'{'", 
-                                                            "'}'", "':'" ];
-	public static readonly symbolicNames: (string | null)[] = [ null, null, 
-                                                             null, null, 
-                                                             null, null, 
-                                                             null, null, 
-                                                             "ID", "NUMBER", 
-                                                             "STRING", "OP", 
-                                                             "WS" ];
-	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];
-
-	public static readonly ruleNames: string[] = [
-		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "ID", "NUMBER", 
-		"STRING", "OP", "WS",
-	];
-
-
-	constructor(input: CharStream) {
-		super(input);
-		this._interp = new LexerATNSimulator(this, tispLexer._ATN, tispLexer.DecisionsToDFA, new PredictionContextCache());
-	}
-
-	public get grammarFileName(): string { return "tisp.g4"; }
-
-	public get literalNames(): (string | null)[] { return tispLexer.literalNames; }
-	public get symbolicNames(): (string | null)[] { return tispLexer.symbolicNames; }
-	public get ruleNames(): string[] { return tispLexer.ruleNames; }
-
-	public get serializedATN(): number[] { return tispLexer._serializedATN; }
-
-	public get channelNames(): string[] { return tispLexer.channelNames; }
-
-	public get modeNames(): string[] { return tispLexer.modeNames; }
-
-	public static readonly _serializedATN: number[] = [4,0,12,129,6,-1,2,0,
-	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
-	7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,
-	1,6,1,6,1,7,4,7,41,8,7,11,7,12,7,42,1,7,5,7,46,8,7,10,7,12,7,49,9,7,1,8,
-	3,8,52,8,8,1,8,5,8,55,8,8,10,8,12,8,58,9,8,1,8,3,8,61,8,8,1,8,4,8,64,8,
-	8,11,8,12,8,65,1,9,1,9,5,9,70,8,9,10,9,12,9,73,9,9,1,9,1,9,1,10,1,10,1,
-	10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
-	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
-	10,1,10,1,10,1,10,3,10,112,8,10,1,11,4,11,115,8,11,11,11,12,11,116,1,11,
-	1,11,5,11,121,8,11,10,11,12,11,124,9,11,3,11,126,8,11,1,11,1,11,0,0,12,
-	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,1,0,8,3,0,65,
-	90,95,95,97,122,5,0,45,45,48,57,65,90,95,95,97,122,1,0,48,57,1,0,34,34,
-	6,0,37,37,42,43,45,45,47,47,61,61,94,94,3,0,38,38,124,124,126,126,4,0,9,
-	10,13,13,32,32,44,44,2,0,10,10,13,13,155,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
-	0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
-	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,27,1,0,
-	0,0,5,29,1,0,0,0,7,31,1,0,0,0,9,33,1,0,0,0,11,35,1,0,0,0,13,37,1,0,0,0,
-	15,40,1,0,0,0,17,51,1,0,0,0,19,67,1,0,0,0,21,111,1,0,0,0,23,125,1,0,0,0,
-	25,26,5,40,0,0,26,2,1,0,0,0,27,28,5,41,0,0,28,4,1,0,0,0,29,30,5,91,0,0,
-	30,6,1,0,0,0,31,32,5,93,0,0,32,8,1,0,0,0,33,34,5,123,0,0,34,10,1,0,0,0,
-	35,36,5,125,0,0,36,12,1,0,0,0,37,38,5,58,0,0,38,14,1,0,0,0,39,41,7,0,0,
-	0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,47,1,0,0,0,
-	44,46,7,1,0,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,
-	16,1,0,0,0,49,47,1,0,0,0,50,52,5,45,0,0,51,50,1,0,0,0,51,52,1,0,0,0,52,
-	60,1,0,0,0,53,55,7,2,0,0,54,53,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,
-	1,0,0,0,57,59,1,0,0,0,58,56,1,0,0,0,59,61,5,46,0,0,60,56,1,0,0,0,60,61,
-	1,0,0,0,61,63,1,0,0,0,62,64,7,2,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,
-	0,0,0,65,66,1,0,0,0,66,18,1,0,0,0,67,71,5,34,0,0,68,70,8,3,0,0,69,68,1,
-	0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,71,1,0,
-	0,0,74,75,5,34,0,0,75,20,1,0,0,0,76,112,7,4,0,0,77,78,5,33,0,0,78,112,5,
-	61,0,0,79,112,5,60,0,0,80,81,5,60,0,0,81,112,5,61,0,0,82,112,5,62,0,0,83,
-	84,5,62,0,0,84,112,5,61,0,0,85,86,5,38,0,0,86,112,5,38,0,0,87,88,5,124,
-	0,0,88,112,5,124,0,0,89,112,5,33,0,0,90,91,5,45,0,0,91,112,5,62,0,0,92,
-	93,5,45,0,0,93,94,5,45,0,0,94,95,5,62,0,0,95,112,5,62,0,0,96,97,5,43,0,
-	0,97,112,5,43,0,0,98,99,5,45,0,0,99,112,5,45,0,0,100,101,5,60,0,0,101,112,
-	5,60,0,0,102,103,5,62,0,0,103,112,5,62,0,0,104,105,5,62,0,0,105,106,5,62,
-	0,0,106,112,5,62,0,0,107,108,5,60,0,0,108,109,5,60,0,0,109,112,5,60,0,0,
-	110,112,7,5,0,0,111,76,1,0,0,0,111,77,1,0,0,0,111,79,1,0,0,0,111,80,1,0,
-	0,0,111,82,1,0,0,0,111,83,1,0,0,0,111,85,1,0,0,0,111,87,1,0,0,0,111,89,
-	1,0,0,0,111,90,1,0,0,0,111,92,1,0,0,0,111,96,1,0,0,0,111,98,1,0,0,0,111,
-	100,1,0,0,0,111,102,1,0,0,0,111,104,1,0,0,0,111,107,1,0,0,0,111,110,1,0,
-	0,0,112,22,1,0,0,0,113,115,7,6,0,0,114,113,1,0,0,0,115,116,1,0,0,0,116,
-	114,1,0,0,0,116,117,1,0,0,0,117,126,1,0,0,0,118,122,5,59,0,0,119,121,8,
-	7,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,
-	126,1,0,0,0,124,122,1,0,0,0,125,114,1,0,0,0,125,118,1,0,0,0,126,127,1,0,
-	0,0,127,128,6,11,0,0,128,24,1,0,0,0,12,0,42,47,51,56,60,65,71,111,116,122,
-	125,1,6,0,0];
-
-	private static __ATN: ATN;
-	public static get _ATN(): ATN {
-		if (!tispLexer.__ATN) {
-			tispLexer.__ATN = new ATNDeserializer().deserialize(tispLexer._serializedATN);
-		}
-
-		return tispLexer.__ATN;
-	}
-
-
-	static DecisionsToDFA = tispLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
-}
\ No newline at end of file
Index: parser/tisp.tokens
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parser/tisp.tokens b/parser/tisp.tokens
deleted file mode 100644
--- a/parser/tisp.tokens	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ /dev/null	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
@@ -1,19 +0,0 @@
-T__0=1
-T__1=2
-T__2=3
-T__3=4
-T__4=5
-T__5=6
-T__6=7
-ID=8
-NUMBER=9
-STRING=10
-OP=11
-WS=12
-'('=1
-')'=2
-'['=3
-']'=4
-'{'=5
-'}'=6
-':'=7
Index: parser/tispParser.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parser/tispParser.ts b/parser/tispParser.ts
deleted file mode 100644
--- a/parser/tispParser.ts	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ /dev/null	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
@@ -1,796 +0,0 @@
-// Generated from /home/tim/dev/mal/impls/tsbun/tisp.g4 by ANTLR 4.13.1
-// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
-
-import {
-	ATN,
-	ATNDeserializer, DecisionState, DFA, FailedPredicateException,
-	RecognitionException, NoViableAltException, BailErrorStrategy,
-	Parser, ParserATNSimulator,
-	RuleContext, ParserRuleContext, PredictionMode, PredictionContextCache,
-	TerminalNode, RuleNode,
-	Token, TokenStream,
-	Interval, IntervalSet
-} from 'antlr4';
-import tispListener from "./tispListener.js";
-import tispVisitor from "./tispVisitor.js";
-
-// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
-// eslint-disable-next-line no-unused-vars
-type int = number;
-
-export default class tispParser extends Parser {
-	public static readonly T__0 = 1;
-	public static readonly T__1 = 2;
-	public static readonly T__2 = 3;
-	public static readonly T__3 = 4;
-	public static readonly T__4 = 5;
-	public static readonly T__5 = 6;
-	public static readonly T__6 = 7;
-	public static readonly ID = 8;
-	public static readonly NUMBER = 9;
-	public static readonly STRING = 10;
-	public static readonly OP = 11;
-	public static readonly WS = 12;
-	public static readonly EOF = Token.EOF;
-	public static readonly RULE_tisp = 0;
-	public static readonly RULE_s_expr = 1;
-	public static readonly RULE_list = 2;
-	public static readonly RULE_array = 3;
-	public static readonly RULE_map = 4;
-	public static readonly RULE_atom = 5;
-	public static readonly RULE_key = 6;
-	public static readonly literalNames: (string | null)[] = [ null, "'('", 
-                                                            "')'", "'['", 
-                                                            "']'", "'{'", 
-                                                            "'}'", "':'" ];
-	public static readonly symbolicNames: (string | null)[] = [ null, null, 
-                                                             null, null, 
-                                                             null, null, 
-                                                             null, null, 
-                                                             "ID", "NUMBER", 
-                                                             "STRING", "OP", 
-                                                             "WS" ];
-	// tslint:disable:no-trailing-whitespace
-	public static readonly ruleNames: string[] = [
-		"tisp", "s_expr", "list", "array", "map", "atom", "key",
-	];
-	public get grammarFileName(): string { return "tisp.g4"; }
-	public get literalNames(): (string | null)[] { return tispParser.literalNames; }
-	public get symbolicNames(): (string | null)[] { return tispParser.symbolicNames; }
-	public get ruleNames(): string[] { return tispParser.ruleNames; }
-	public get serializedATN(): number[] { return tispParser._serializedATN; }
-
-	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
-		return new FailedPredicateException(this, predicate, message);
-	}
-
-	constructor(input: TokenStream) {
-		super(input);
-		this._interp = new ParserATNSimulator(this, tispParser._ATN, tispParser.DecisionsToDFA, new PredictionContextCache());
-	}
-	// @RuleVersion(0)
-	public tisp(): TispContext {
-		let localctx: TispContext = new TispContext(this, this._ctx, this.state);
-		this.enterRule(localctx, 0, tispParser.RULE_tisp);
-		let _la: number;
-		try {
-			this.enterOuterAlt(localctx, 1);
-			{
-			this.state = 15;
-			this._errHandler.sync(this);
-			_la = this._input.LA(1);
-			do {
-				{
-				{
-				this.state = 14;
-				this.s_expr();
-				}
-				}
-				this.state = 17;
-				this._errHandler.sync(this);
-				_la = this._input.LA(1);
-			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4010) !== 0));
-			this.state = 19;
-			this.match(tispParser.EOF);
-			}
-		}
-		catch (re) {
-			if (re instanceof RecognitionException) {
-				localctx.exception = re;
-				this._errHandler.reportError(this, re);
-				this._errHandler.recover(this, re);
-			} else {
-				throw re;
-			}
-		}
-		finally {
-			this.exitRule();
-		}
-		return localctx;
-	}
-	// @RuleVersion(0)
-	public s_expr(): S_exprContext {
-		let localctx: S_exprContext = new S_exprContext(this, this._ctx, this.state);
-		this.enterRule(localctx, 2, tispParser.RULE_s_expr);
-		try {
-			this.state = 27;
-			this._errHandler.sync(this);
-			switch (this._input.LA(1)) {
-			case 1:
-			case 3:
-			case 5:
-				this.enterOuterAlt(localctx, 1);
-				{
-				this.state = 24;
-				this._errHandler.sync(this);
-				switch (this._input.LA(1)) {
-				case 1:
-					{
-					this.state = 21;
-					this.list();
-					}
-					break;
-				case 3:
-					{
-					this.state = 22;
-					this.array();
-					}
-					break;
-				case 5:
-					{
-					this.state = 23;
-					this.map();
-					}
-					break;
-				default:
-					throw new NoViableAltException(this);
-				}
-				}
-				break;
-			case 7:
-			case 8:
-			case 9:
-			case 10:
-			case 11:
-				this.enterOuterAlt(localctx, 2);
-				{
-				this.state = 26;
-				this.atom();
-				}
-				break;
-			default:
-				throw new NoViableAltException(this);
-			}
-		}
-		catch (re) {
-			if (re instanceof RecognitionException) {
-				localctx.exception = re;
-				this._errHandler.reportError(this, re);
-				this._errHandler.recover(this, re);
-			} else {
-				throw re;
-			}
-		}
-		finally {
-			this.exitRule();
-		}
-		return localctx;
-	}
-	// @RuleVersion(0)
-	public list(): ListContext {
-		let localctx: ListContext = new ListContext(this, this._ctx, this.state);
-		this.enterRule(localctx, 4, tispParser.RULE_list);
-		let _la: number;
-		try {
-			this.enterOuterAlt(localctx, 1);
-			{
-			this.state = 29;
-			this.match(tispParser.T__0);
-			this.state = 33;
-			this._errHandler.sync(this);
-			_la = this._input.LA(1);
-			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4010) !== 0)) {
-				{
-				{
-				this.state = 30;
-				this.s_expr();
-				}
-				}
-				this.state = 35;
-				this._errHandler.sync(this);
-				_la = this._input.LA(1);
-			}
-			this.state = 36;
-			this.match(tispParser.T__1);
-			}
-		}
-		catch (re) {
-			if (re instanceof RecognitionException) {
-				localctx.exception = re;
-				this._errHandler.reportError(this, re);
-				this._errHandler.recover(this, re);
-			} else {
-				throw re;
-			}
-		}
-		finally {
-			this.exitRule();
-		}
-		return localctx;
-	}
-	// @RuleVersion(0)
-	public array(): ArrayContext {
-		let localctx: ArrayContext = new ArrayContext(this, this._ctx, this.state);
-		this.enterRule(localctx, 6, tispParser.RULE_array);
-		let _la: number;
-		try {
-			this.enterOuterAlt(localctx, 1);
-			{
-			this.state = 38;
-			this.match(tispParser.T__2);
-			this.state = 42;
-			this._errHandler.sync(this);
-			_la = this._input.LA(1);
-			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4010) !== 0)) {
-				{
-				{
-				this.state = 39;
-				this.s_expr();
-				}
-				}
-				this.state = 44;
-				this._errHandler.sync(this);
-				_la = this._input.LA(1);
-			}
-			this.state = 45;
-			this.match(tispParser.T__3);
-			}
-		}
-		catch (re) {
-			if (re instanceof RecognitionException) {
-				localctx.exception = re;
-				this._errHandler.reportError(this, re);
-				this._errHandler.recover(this, re);
-			} else {
-				throw re;
-			}
-		}
-		finally {
-			this.exitRule();
-		}
-		return localctx;
-	}
-	// @RuleVersion(0)
-	public map(): MapContext {
-		let localctx: MapContext = new MapContext(this, this._ctx, this.state);
-		this.enterRule(localctx, 8, tispParser.RULE_map);
-		let _la: number;
-		try {
-			this.enterOuterAlt(localctx, 1);
-			{
-			this.state = 47;
-			this.match(tispParser.T__4);
-			this.state = 51;
-			this._errHandler.sync(this);
-			_la = this._input.LA(1);
-			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4010) !== 0)) {
-				{
-				{
-				this.state = 48;
-				this.s_expr();
-				}
-				}
-				this.state = 53;
-				this._errHandler.sync(this);
-				_la = this._input.LA(1);
-			}
-			this.state = 54;
-			this.match(tispParser.T__5);
-			}
-		}
-		catch (re) {
-			if (re instanceof RecognitionException) {
-				localctx.exception = re;
-				this._errHandler.reportError(this, re);
-				this._errHandler.recover(this, re);
-			} else {
-				throw re;
-			}
-		}
-		finally {
-			this.exitRule();
-		}
-		return localctx;
-	}
-	// @RuleVersion(0)
-	public atom(): AtomContext {
-		let localctx: AtomContext = new AtomContext(this, this._ctx, this.state);
-		this.enterRule(localctx, 10, tispParser.RULE_atom);
-		try {
-			this.state = 61;
-			this._errHandler.sync(this);
-			switch (this._input.LA(1)) {
-			case 8:
-				localctx = new IdContext(this, localctx);
-				this.enterOuterAlt(localctx, 1);
-				{
-				this.state = 56;
-				this.match(tispParser.ID);
-				}
-				break;
-			case 9:
-				localctx = new NumberContext(this, localctx);
-				this.enterOuterAlt(localctx, 2);
-				{
-				this.state = 57;
-				this.match(tispParser.NUMBER);
-				}
-				break;
-			case 10:
-				localctx = new StringContext(this, localctx);
-				this.enterOuterAlt(localctx, 3);
-				{
-				this.state = 58;
-				this.match(tispParser.STRING);
-				}
-				break;
-			case 11:
-				localctx = new OpContext(this, localctx);
-				this.enterOuterAlt(localctx, 4);
-				{
-				this.state = 59;
-				this.match(tispParser.OP);
-				}
-				break;
-			case 7:
-				localctx = new AtomKeyContext(this, localctx);
-				this.enterOuterAlt(localctx, 5);
-				{
-				this.state = 60;
-				this.key();
-				}
-				break;
-			default:
-				throw new NoViableAltException(this);
-			}
-		}
-		catch (re) {
-			if (re instanceof RecognitionException) {
-				localctx.exception = re;
-				this._errHandler.reportError(this, re);
-				this._errHandler.recover(this, re);
-			} else {
-				throw re;
-			}
-		}
-		finally {
-			this.exitRule();
-		}
-		return localctx;
-	}
-	// @RuleVersion(0)
-	public key(): KeyContext {
-		let localctx: KeyContext = new KeyContext(this, this._ctx, this.state);
-		this.enterRule(localctx, 12, tispParser.RULE_key);
-		try {
-			this.enterOuterAlt(localctx, 1);
-			{
-			this.state = 63;
-			this.match(tispParser.T__6);
-			this.state = 64;
-			this.match(tispParser.ID);
-			}
-		}
-		catch (re) {
-			if (re instanceof RecognitionException) {
-				localctx.exception = re;
-				this._errHandler.reportError(this, re);
-				this._errHandler.recover(this, re);
-			} else {
-				throw re;
-			}
-		}
-		finally {
-			this.exitRule();
-		}
-		return localctx;
-	}
-
-	public static readonly _serializedATN: number[] = [4,1,12,67,2,0,7,0,2,
-	1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,4,0,16,8,0,11,0,12,0,
-	17,1,0,1,0,1,1,1,1,1,1,3,1,25,8,1,1,1,3,1,28,8,1,1,2,1,2,5,2,32,8,2,10,
-	2,12,2,35,9,2,1,2,1,2,1,3,1,3,5,3,41,8,3,10,3,12,3,44,9,3,1,3,1,3,1,4,1,
-	4,5,4,50,8,4,10,4,12,4,53,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,3,5,62,8,5,1,
-	6,1,6,1,6,1,6,0,0,7,0,2,4,6,8,10,12,0,0,70,0,15,1,0,0,0,2,27,1,0,0,0,4,
-	29,1,0,0,0,6,38,1,0,0,0,8,47,1,0,0,0,10,61,1,0,0,0,12,63,1,0,0,0,14,16,
-	3,2,1,0,15,14,1,0,0,0,16,17,1,0,0,0,17,15,1,0,0,0,17,18,1,0,0,0,18,19,1,
-	0,0,0,19,20,5,0,0,1,20,1,1,0,0,0,21,25,3,4,2,0,22,25,3,6,3,0,23,25,3,8,
-	4,0,24,21,1,0,0,0,24,22,1,0,0,0,24,23,1,0,0,0,25,28,1,0,0,0,26,28,3,10,
-	5,0,27,24,1,0,0,0,27,26,1,0,0,0,28,3,1,0,0,0,29,33,5,1,0,0,30,32,3,2,1,
-	0,31,30,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,36,1,0,0,0,
-	35,33,1,0,0,0,36,37,5,2,0,0,37,5,1,0,0,0,38,42,5,3,0,0,39,41,3,2,1,0,40,
-	39,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,45,1,0,0,0,44,42,
-	1,0,0,0,45,46,5,4,0,0,46,7,1,0,0,0,47,51,5,5,0,0,48,50,3,2,1,0,49,48,1,
-	0,0,0,50,53,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,51,1,0,
-	0,0,54,55,5,6,0,0,55,9,1,0,0,0,56,62,5,8,0,0,57,62,5,9,0,0,58,62,5,10,0,
-	0,59,62,5,11,0,0,60,62,3,12,6,0,61,56,1,0,0,0,61,57,1,0,0,0,61,58,1,0,0,
-	0,61,59,1,0,0,0,61,60,1,0,0,0,62,11,1,0,0,0,63,64,5,7,0,0,64,65,5,8,0,0,
-	65,13,1,0,0,0,7,17,24,27,33,42,51,61];
-
-	private static __ATN: ATN;
-	public static get _ATN(): ATN {
-		if (!tispParser.__ATN) {
-			tispParser.__ATN = new ATNDeserializer().deserialize(tispParser._serializedATN);
-		}
-
-		return tispParser.__ATN;
-	}
-
-
-	static DecisionsToDFA = tispParser._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
-
-}
-
-export class TispContext extends ParserRuleContext {
-	constructor(parser?: tispParser, parent?: ParserRuleContext, invokingState?: number) {
-		super(parent, invokingState);
-    	this.parser = parser;
-	}
-	public EOF(): TerminalNode {
-		return this.getToken(tispParser.EOF, 0);
-	}
-	public s_expr_list(): S_exprContext[] {
-		return this.getTypedRuleContexts(S_exprContext) as S_exprContext[];
-	}
-	public s_expr(i: number): S_exprContext {
-		return this.getTypedRuleContext(S_exprContext, i) as S_exprContext;
-	}
-    public get ruleIndex(): number {
-    	return tispParser.RULE_tisp;
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterTisp) {
-	 		listener.enterTisp(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitTisp) {
-	 		listener.exitTisp(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitTisp) {
-			return visitor.visitTisp(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-
-
-export class S_exprContext extends ParserRuleContext {
-	constructor(parser?: tispParser, parent?: ParserRuleContext, invokingState?: number) {
-		super(parent, invokingState);
-    	this.parser = parser;
-	}
-	public list(): ListContext {
-		return this.getTypedRuleContext(ListContext, 0) as ListContext;
-	}
-	public array(): ArrayContext {
-		return this.getTypedRuleContext(ArrayContext, 0) as ArrayContext;
-	}
-	public map(): MapContext {
-		return this.getTypedRuleContext(MapContext, 0) as MapContext;
-	}
-	public atom(): AtomContext {
-		return this.getTypedRuleContext(AtomContext, 0) as AtomContext;
-	}
-    public get ruleIndex(): number {
-    	return tispParser.RULE_s_expr;
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterS_expr) {
-	 		listener.enterS_expr(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitS_expr) {
-	 		listener.exitS_expr(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitS_expr) {
-			return visitor.visitS_expr(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-
-
-export class ListContext extends ParserRuleContext {
-	constructor(parser?: tispParser, parent?: ParserRuleContext, invokingState?: number) {
-		super(parent, invokingState);
-    	this.parser = parser;
-	}
-	public s_expr_list(): S_exprContext[] {
-		return this.getTypedRuleContexts(S_exprContext) as S_exprContext[];
-	}
-	public s_expr(i: number): S_exprContext {
-		return this.getTypedRuleContext(S_exprContext, i) as S_exprContext;
-	}
-    public get ruleIndex(): number {
-    	return tispParser.RULE_list;
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterList) {
-	 		listener.enterList(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitList) {
-	 		listener.exitList(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitList) {
-			return visitor.visitList(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-
-
-export class ArrayContext extends ParserRuleContext {
-	constructor(parser?: tispParser, parent?: ParserRuleContext, invokingState?: number) {
-		super(parent, invokingState);
-    	this.parser = parser;
-	}
-	public s_expr_list(): S_exprContext[] {
-		return this.getTypedRuleContexts(S_exprContext) as S_exprContext[];
-	}
-	public s_expr(i: number): S_exprContext {
-		return this.getTypedRuleContext(S_exprContext, i) as S_exprContext;
-	}
-    public get ruleIndex(): number {
-    	return tispParser.RULE_array;
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterArray) {
-	 		listener.enterArray(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitArray) {
-	 		listener.exitArray(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitArray) {
-			return visitor.visitArray(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-
-
-export class MapContext extends ParserRuleContext {
-	constructor(parser?: tispParser, parent?: ParserRuleContext, invokingState?: number) {
-		super(parent, invokingState);
-    	this.parser = parser;
-	}
-	public s_expr_list(): S_exprContext[] {
-		return this.getTypedRuleContexts(S_exprContext) as S_exprContext[];
-	}
-	public s_expr(i: number): S_exprContext {
-		return this.getTypedRuleContext(S_exprContext, i) as S_exprContext;
-	}
-    public get ruleIndex(): number {
-    	return tispParser.RULE_map;
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterMap) {
-	 		listener.enterMap(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitMap) {
-	 		listener.exitMap(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitMap) {
-			return visitor.visitMap(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-
-
-export class AtomContext extends ParserRuleContext {
-	constructor(parser?: tispParser, parent?: ParserRuleContext, invokingState?: number) {
-		super(parent, invokingState);
-    	this.parser = parser;
-	}
-    public get ruleIndex(): number {
-    	return tispParser.RULE_atom;
-	}
-	public copyFrom(ctx: AtomContext): void {
-		super.copyFrom(ctx);
-	}
-}
-export class NumberContext extends AtomContext {
-	constructor(parser: tispParser, ctx: AtomContext) {
-		super(parser, ctx.parentCtx, ctx.invokingState);
-		super.copyFrom(ctx);
-	}
-	public NUMBER(): TerminalNode {
-		return this.getToken(tispParser.NUMBER, 0);
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterNumber) {
-	 		listener.enterNumber(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitNumber) {
-	 		listener.exitNumber(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitNumber) {
-			return visitor.visitNumber(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-export class OpContext extends AtomContext {
-	constructor(parser: tispParser, ctx: AtomContext) {
-		super(parser, ctx.parentCtx, ctx.invokingState);
-		super.copyFrom(ctx);
-	}
-	public OP(): TerminalNode {
-		return this.getToken(tispParser.OP, 0);
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterOp) {
-	 		listener.enterOp(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitOp) {
-	 		listener.exitOp(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitOp) {
-			return visitor.visitOp(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-export class AtomKeyContext extends AtomContext {
-	constructor(parser: tispParser, ctx: AtomContext) {
-		super(parser, ctx.parentCtx, ctx.invokingState);
-		super.copyFrom(ctx);
-	}
-	public key(): KeyContext {
-		return this.getTypedRuleContext(KeyContext, 0) as KeyContext;
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterAtomKey) {
-	 		listener.enterAtomKey(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitAtomKey) {
-	 		listener.exitAtomKey(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitAtomKey) {
-			return visitor.visitAtomKey(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-export class StringContext extends AtomContext {
-	constructor(parser: tispParser, ctx: AtomContext) {
-		super(parser, ctx.parentCtx, ctx.invokingState);
-		super.copyFrom(ctx);
-	}
-	public STRING(): TerminalNode {
-		return this.getToken(tispParser.STRING, 0);
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterString) {
-	 		listener.enterString(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitString) {
-	 		listener.exitString(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitString) {
-			return visitor.visitString(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-export class IdContext extends AtomContext {
-	constructor(parser: tispParser, ctx: AtomContext) {
-		super(parser, ctx.parentCtx, ctx.invokingState);
-		super.copyFrom(ctx);
-	}
-	public ID(): TerminalNode {
-		return this.getToken(tispParser.ID, 0);
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterId) {
-	 		listener.enterId(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitId) {
-	 		listener.exitId(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitId) {
-			return visitor.visitId(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
-
-
-export class KeyContext extends ParserRuleContext {
-	constructor(parser?: tispParser, parent?: ParserRuleContext, invokingState?: number) {
-		super(parent, invokingState);
-    	this.parser = parser;
-	}
-	public ID(): TerminalNode {
-		return this.getToken(tispParser.ID, 0);
-	}
-    public get ruleIndex(): number {
-    	return tispParser.RULE_key;
-	}
-	public enterRule(listener: tispListener): void {
-	    if(listener.enterKey) {
-	 		listener.enterKey(this);
-		}
-	}
-	public exitRule(listener: tispListener): void {
-	    if(listener.exitKey) {
-	 		listener.exitKey(this);
-		}
-	}
-	// @Override
-	public accept<Result>(visitor: tispVisitor<Result>): Result {
-		if (visitor.visitKey) {
-			return visitor.visitKey(this);
-		} else {
-			return visitor.visitChildren(this);
-		}
-	}
-}
Index: parser/tispLexer.tokens
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parser/tispLexer.tokens b/parser/tispLexer.tokens
deleted file mode 100644
--- a/parser/tispLexer.tokens	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ /dev/null	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
@@ -1,19 +0,0 @@
-T__0=1
-T__1=2
-T__2=3
-T__3=4
-T__4=5
-T__5=6
-T__6=7
-ID=8
-NUMBER=9
-STRING=10
-OP=11
-WS=12
-'('=1
-')'=2
-'['=3
-']'=4
-'{'=5
-'}'=6
-':'=7
Index: parser/tisp.interp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parser/tisp.interp b/parser/tisp.interp
deleted file mode 100644
--- a/parser/tisp.interp	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ /dev/null	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
@@ -1,42 +0,0 @@
-token literal names:
-null
-'('
-')'
-'['
-']'
-'{'
-'}'
-':'
-null
-null
-null
-null
-null
-
-token symbolic names:
-null
-null
-null
-null
-null
-null
-null
-null
-ID
-NUMBER
-STRING
-OP
-WS
-
-rule names:
-tisp
-s_expr
-list
-array
-map
-atom
-key
-
-
-atn:
-[4, 1, 12, 67, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 1, 0, 4, 0, 16, 8, 0, 11, 0, 12, 0, 17, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 3, 1, 25, 8, 1, 1, 1, 3, 1, 28, 8, 1, 1, 2, 1, 2, 5, 2, 32, 8, 2, 10, 2, 12, 2, 35, 9, 2, 1, 2, 1, 2, 1, 3, 1, 3, 5, 3, 41, 8, 3, 10, 3, 12, 3, 44, 9, 3, 1, 3, 1, 3, 1, 4, 1, 4, 5, 4, 50, 8, 4, 10, 4, 12, 4, 53, 9, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 62, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 0, 0, 7, 0, 2, 4, 6, 8, 10, 12, 0, 0, 70, 0, 15, 1, 0, 0, 0, 2, 27, 1, 0, 0, 0, 4, 29, 1, 0, 0, 0, 6, 38, 1, 0, 0, 0, 8, 47, 1, 0, 0, 0, 10, 61, 1, 0, 0, 0, 12, 63, 1, 0, 0, 0, 14, 16, 3, 2, 1, 0, 15, 14, 1, 0, 0, 0, 16, 17, 1, 0, 0, 0, 17, 15, 1, 0, 0, 0, 17, 18, 1, 0, 0, 0, 18, 19, 1, 0, 0, 0, 19, 20, 5, 0, 0, 1, 20, 1, 1, 0, 0, 0, 21, 25, 3, 4, 2, 0, 22, 25, 3, 6, 3, 0, 23, 25, 3, 8, 4, 0, 24, 21, 1, 0, 0, 0, 24, 22, 1, 0, 0, 0, 24, 23, 1, 0, 0, 0, 25, 28, 1, 0, 0, 0, 26, 28, 3, 10, 5, 0, 27, 24, 1, 0, 0, 0, 27, 26, 1, 0, 0, 0, 28, 3, 1, 0, 0, 0, 29, 33, 5, 1, 0, 0, 30, 32, 3, 2, 1, 0, 31, 30, 1, 0, 0, 0, 32, 35, 1, 0, 0, 0, 33, 31, 1, 0, 0, 0, 33, 34, 1, 0, 0, 0, 34, 36, 1, 0, 0, 0, 35, 33, 1, 0, 0, 0, 36, 37, 5, 2, 0, 0, 37, 5, 1, 0, 0, 0, 38, 42, 5, 3, 0, 0, 39, 41, 3, 2, 1, 0, 40, 39, 1, 0, 0, 0, 41, 44, 1, 0, 0, 0, 42, 40, 1, 0, 0, 0, 42, 43, 1, 0, 0, 0, 43, 45, 1, 0, 0, 0, 44, 42, 1, 0, 0, 0, 45, 46, 5, 4, 0, 0, 46, 7, 1, 0, 0, 0, 47, 51, 5, 5, 0, 0, 48, 50, 3, 2, 1, 0, 49, 48, 1, 0, 0, 0, 50, 53, 1, 0, 0, 0, 51, 49, 1, 0, 0, 0, 51, 52, 1, 0, 0, 0, 52, 54, 1, 0, 0, 0, 53, 51, 1, 0, 0, 0, 54, 55, 5, 6, 0, 0, 55, 9, 1, 0, 0, 0, 56, 62, 5, 8, 0, 0, 57, 62, 5, 9, 0, 0, 58, 62, 5, 10, 0, 0, 59, 62, 5, 11, 0, 0, 60, 62, 3, 12, 6, 0, 61, 56, 1, 0, 0, 0, 61, 57, 1, 0, 0, 0, 61, 58, 1, 0, 0, 0, 61, 59, 1, 0, 0, 0, 61, 60, 1, 0, 0, 0, 62, 11, 1, 0, 0, 0, 63, 64, 5, 7, 0, 0, 64, 65, 5, 8, 0, 0, 65, 13, 1, 0, 0, 0, 7, 17, 24, 27, 33, 42, 51, 61]
\ No newline at end of file
Index: parser/tispListener.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parser/tispListener.ts b/parser/tispListener.ts
deleted file mode 100644
--- a/parser/tispListener.ts	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ /dev/null	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
@@ -1,145 +0,0 @@
-// Generated from /home/tim/dev/mal/impls/tsbun/tisp.g4 by ANTLR 4.13.1
-
-import {ParseTreeListener} from "antlr4";
-
-
-import { TispContext } from "./tispParser";
-import { S_exprContext } from "./tispParser";
-import { ListContext } from "./tispParser";
-import { ArrayContext } from "./tispParser";
-import { MapContext } from "./tispParser";
-import { IdContext } from "./tispParser";
-import { NumberContext } from "./tispParser";
-import { StringContext } from "./tispParser";
-import { OpContext } from "./tispParser";
-import { AtomKeyContext } from "./tispParser";
-import { KeyContext } from "./tispParser";
-
-
-/**
- * This interface defines a complete listener for a parse tree produced by
- * `tispParser`.
- */
-export default class tispListener extends ParseTreeListener {
-	/**
-	 * Enter a parse tree produced by `tispParser.tisp`.
-	 * @param ctx the parse tree
-	 */
-	enterTisp?: (ctx: TispContext) => void;
-	/**
-	 * Exit a parse tree produced by `tispParser.tisp`.
-	 * @param ctx the parse tree
-	 */
-	exitTisp?: (ctx: TispContext) => void;
-	/**
-	 * Enter a parse tree produced by `tispParser.s_expr`.
-	 * @param ctx the parse tree
-	 */
-	enterS_expr?: (ctx: S_exprContext) => void;
-	/**
-	 * Exit a parse tree produced by `tispParser.s_expr`.
-	 * @param ctx the parse tree
-	 */
-	exitS_expr?: (ctx: S_exprContext) => void;
-	/**
-	 * Enter a parse tree produced by `tispParser.list`.
-	 * @param ctx the parse tree
-	 */
-	enterList?: (ctx: ListContext) => void;
-	/**
-	 * Exit a parse tree produced by `tispParser.list`.
-	 * @param ctx the parse tree
-	 */
-	exitList?: (ctx: ListContext) => void;
-	/**
-	 * Enter a parse tree produced by `tispParser.array`.
-	 * @param ctx the parse tree
-	 */
-	enterArray?: (ctx: ArrayContext) => void;
-	/**
-	 * Exit a parse tree produced by `tispParser.array`.
-	 * @param ctx the parse tree
-	 */
-	exitArray?: (ctx: ArrayContext) => void;
-	/**
-	 * Enter a parse tree produced by `tispParser.map`.
-	 * @param ctx the parse tree
-	 */
-	enterMap?: (ctx: MapContext) => void;
-	/**
-	 * Exit a parse tree produced by `tispParser.map`.
-	 * @param ctx the parse tree
-	 */
-	exitMap?: (ctx: MapContext) => void;
-	/**
-	 * Enter a parse tree produced by the `id`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	enterId?: (ctx: IdContext) => void;
-	/**
-	 * Exit a parse tree produced by the `id`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	exitId?: (ctx: IdContext) => void;
-	/**
-	 * Enter a parse tree produced by the `number`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	enterNumber?: (ctx: NumberContext) => void;
-	/**
-	 * Exit a parse tree produced by the `number`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	exitNumber?: (ctx: NumberContext) => void;
-	/**
-	 * Enter a parse tree produced by the `string`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	enterString?: (ctx: StringContext) => void;
-	/**
-	 * Exit a parse tree produced by the `string`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	exitString?: (ctx: StringContext) => void;
-	/**
-	 * Enter a parse tree produced by the `op`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	enterOp?: (ctx: OpContext) => void;
-	/**
-	 * Exit a parse tree produced by the `op`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	exitOp?: (ctx: OpContext) => void;
-	/**
-	 * Enter a parse tree produced by the `atomKey`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	enterAtomKey?: (ctx: AtomKeyContext) => void;
-	/**
-	 * Exit a parse tree produced by the `atomKey`
-	 * labeled alternative in `tispParser.atom`.
-	 * @param ctx the parse tree
-	 */
-	exitAtomKey?: (ctx: AtomKeyContext) => void;
-	/**
-	 * Enter a parse tree produced by `tispParser.key`.
-	 * @param ctx the parse tree
-	 */
-	enterKey?: (ctx: KeyContext) => void;
-	/**
-	 * Exit a parse tree produced by `tispParser.key`.
-	 * @param ctx the parse tree
-	 */
-	exitKey?: (ctx: KeyContext) => void;
-}
-
Index: ../../Makefile.impls
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># HOWTO add a new implementation (named \"foo\"):\n# - Add \"foo\" to the IMPLS variable (alphabetical order)\n# - Add a new \"foo_STEP_TO_PROG\" variable.\n# - Add an \"impls/foo/run\" script.\n# - Add an \"impls/foo/Makefile\"\n# - Add an \"impls/foo/Dockerfile\"\n# - Implement each step in \"impls/foo/\".\n\n#\n# Implementation specific command line settings\n#\n\n# cbm or qbasic\nbasic_MODE = cbm\n# clj or cljs (Clojure vs ClojureScript/lumo)\nclojure_MODE = clj\n# gdc, ldc2, or dmd\nd_MODE = gdc\n# python, js, cpp, or neko\nhaxe_MODE = neko\n# octave or matlab\nmatlab_MODE = octave\n# python, python2 or python3\npython_MODE = python\n# scheme (chibi, kawa, gauche, chicken, sagittarius, cyclone, foment)\nscheme_MODE = chibi\n# sml (polyml, mlton, mosml)\nsml_MODE = polyml\n# wasmtime wasmer lucet wax  node warpy  wace_libc\nwasm_MODE = wasmtime\n\n\n#\n# Implementation specific settings\n#\n\nIMPLS = ada ada.2 awk bash basic bbc-basic c c.2 chuck clojure coffee common-lisp cpp crystal cs d dart \\\n\telisp elixir elm erlang es6 factor fantom fennel forth fsharp go groovy gnu-smalltalk \\\n\tguile haskell haxe hy io janet java java-truffle js jq julia kotlin livescript logo lua make mal \\\n\tmatlab miniMAL nasm nim objc objpascal ocaml perl perl6 php picolisp pike plpgsql \\\n\tplsql powershell prolog ps purs python python.2 r racket rexx rpython ruby ruby.2 rust scala scheme skew sml \\\n\tswift swift3 swift4 swift5 tcl ts tsbun vala vb vhdl vimscript wasm wren yorick xslt zig\n\nstep5_EXCLUDES += bash        # never completes at 10,000\nstep5_EXCLUDES += basic       # too slow, and limited to ints of 2^16\nstep5_EXCLUDES += logo        # too slow for 10,000\nstep5_EXCLUDES += make        # no TCO capability (iteration or recursion)\nstep5_EXCLUDES += mal         # host impl dependent\nstep5_EXCLUDES += matlab      # never completes at 10,000\nstep5_EXCLUDES += plpgsql     # too slow for 10,000\nstep5_EXCLUDES += plsql       # too slow for 10,000\nstep5_EXCLUDES += powershell  # too slow for 10,000\nstep5_EXCLUDES += prolog      # no iteration (but interpreter does TCO implicitly)\nstep5_EXCLUDES += sml         # not implemented :(\nstep5_EXCLUDES += $(if $(filter cpp,$(haxe_MODE)),haxe,) # cpp finishes 10,000, segfaults at 100,000\nstep5_EXCLUDES += xslt\t\t  # iteration cannot be expressed\n\ndist_EXCLUDES += mal\n# TODO: still need to implement dist\ndist_EXCLUDES += guile io julia matlab swift\n\n\n# Extra options to pass to runtest.py\nbbc-basic_TEST_OPTS = --test-timeout 60\nguile_TEST_OPTS = --test-timeout 120\nio_TEST_OPTS = --test-timeout 120\njava-truffle_TEST_OPTS = --start-timeout 30\nlogo_TEST_OPTS = --start-timeout 60 --test-timeout 120\nmal_TEST_OPTS = --start-timeout 60 --test-timeout 120\nminiMAL_TEST_OPTS = --start-timeout 60 --test-timeout 120\nperl6_TEST_OPTS = --test-timeout=60\nplpgsql_TEST_OPTS = --start-timeout 60 --test-timeout 180\nplsql_TEST_OPTS = --start-timeout 120 --test-timeout 120\nvimscript_TEST_OPTS = --test-timeout 30\nifeq ($(MAL_IMPL),vimscript)\nmal_TEST_OPTS = --start-timeout 60 --test-timeout 180\nelse ifeq ($(MAL_IMPL),powershell)\nmal_TEST_OPTS = --start-timeout 60 --test-timeout 180\nendif\nxslt_TEST_OPTS = --test-timeout 120\n\n\n#\n# Implementation specific utility functions\n#\n\nbasic_STEP_TO_PROG_cbm          = impls/basic/$($(1)).bas\nbasic_STEP_TO_PROG_qbasic       = impls/basic/$($(1))\n\nclojure_STEP_TO_PROG_clj        = impls/clojure/target/$($(1)).jar\nclojure_STEP_TO_PROG_cljs       = impls/clojure/src/mal/$($(1)).cljc\n\nhaxe_STEP_TO_PROG_neko          = impls/haxe/$($(1)).n\nhaxe_STEP_TO_PROG_python        = impls/haxe/$($(1)).py\nhaxe_STEP_TO_PROG_cpp           = impls/haxe/cpp/$($(1))\nhaxe_STEP_TO_PROG_js            = impls/haxe/$($(1)).js\n\nscheme_STEP_TO_PROG_chibi       = impls/scheme/$($(1)).scm\nscheme_STEP_TO_PROG_kawa        = impls/scheme/out/$($(1)).class\nscheme_STEP_TO_PROG_gauche      = impls/scheme/$($(1)).scm\nscheme_STEP_TO_PROG_chicken     = impls/scheme/$($(1))\nscheme_STEP_TO_PROG_sagittarius = impls/scheme/$($(1)).scm\nscheme_STEP_TO_PROG_cyclone     = impls/scheme/$($(1))\nscheme_STEP_TO_PROG_foment      = impls/scheme/$($(1)).scm\n\n# Map of step (e.g. \"step8\") to executable file for that step\nada_STEP_TO_PROG =           impls/ada/$($(1))\nada.2_STEP_TO_PROG =         impls/ada.2/$($(1))\nawk_STEP_TO_PROG =           impls/awk/$($(1)).awk\nbash_STEP_TO_PROG =          impls/bash/$($(1)).sh\nbasic_STEP_TO_PROG =         $(basic_STEP_TO_PROG_$(basic_MODE))\nbbc-basic_STEP_TO_PROG =     impls/bbc-basic/$($(1)).bas\nc_STEP_TO_PROG =             impls/c/$($(1))\nc.2_STEP_TO_PROG =           impls/c.2/$($(1))\nchuck_STEP_TO_PROG =         impls/chuck/$($(1)).ck\nclojure_STEP_TO_PROG =       $(clojure_STEP_TO_PROG_$(clojure_MODE))\ncoffee_STEP_TO_PROG =        impls/coffee/$($(1)).coffee\ncommon-lisp_STEP_TO_PROG =   impls/common-lisp/$($(1))\ncpp_STEP_TO_PROG =           impls/cpp/$($(1))\ncrystal_STEP_TO_PROG =       impls/crystal/$($(1))\ncs_STEP_TO_PROG =            impls/cs/$($(1)).exe\nd_STEP_TO_PROG =             impls/d/$($(1))\ndart_STEP_TO_PROG =          impls/dart/$($(1)).dart\nelisp_STEP_TO_PROG =         impls/elisp/$($(1)).el\nelixir_STEP_TO_PROG =        impls/elixir/lib/mix/tasks/$($(1)).ex\nelm_STEP_TO_PROG =           impls/elm/$($(1)).js\nerlang_STEP_TO_PROG =        impls/erlang/$($(1))\nes6_STEP_TO_PROG =           impls/es6/$($(1)).mjs\nfactor_STEP_TO_PROG =        impls/factor/$($(1))/$($(1)).factor\nfantom_STEP_TO_PROG =        impls/fantom/lib/fan/$($(1)).pod\nfennel_STEP_TO_PROG =        impls/fennel/$($(1)).fnl\nforth_STEP_TO_PROG =         impls/forth/$($(1)).fs\nfsharp_STEP_TO_PROG =        impls/fsharp/$($(1)).exe\ngo_STEP_TO_PROG =            impls/go/$($(1))\ngroovy_STEP_TO_PROG =        impls/groovy/$($(1)).groovy\ngnu-smalltalk_STEP_TO_PROG = impls/gnu-smalltalk/$($(1)).st\nguile_STEP_TO_PROG =         impls/guile/$($(1)).scm\nhaskell_STEP_TO_PROG =       impls/haskell/$($(1))\nhaxe_STEP_TO_PROG =          $(haxe_STEP_TO_PROG_$(haxe_MODE))\nhy_STEP_TO_PROG =            impls/hy/$($(1)).hy\nio_STEP_TO_PROG =            impls/io/$($(1)).io\njanet_STEP_TO_PROG =         impls/janet/$($(1)).janet\njava_STEP_TO_PROG =          impls/java/target/classes/mal/$($(1)).class\njava-truffle_STEP_TO_PROG =  impls/java-truffle/build/classes/java/main/truffle/mal/$($(1)).class\njs_STEP_TO_PROG =            impls/js/$($(1)).js\njq_STEP_PROG =               impls/jq/$($(1)).jq\njulia_STEP_TO_PROG =         impls/julia/$($(1)).jl\nkotlin_STEP_TO_PROG =        impls/kotlin/$($(1)).jar\nlivescript_STEP_TO_PROG =    impls/livescript/$($(1)).js\nlogo_STEP_TO_PROG =          impls/logo/$($(1)).lg\nlua_STEP_TO_PROG =           impls/lua/$($(1)).lua\nmake_STEP_TO_PROG =          impls/make/$($(1)).mk\nmal_STEP_TO_PROG =           impls/mal/$($(1)).mal\nmatlab_STEP_TO_PROG =        impls/matlab/$($(1)).m\nminiMAL_STEP_TO_PROG =       impls/miniMAL/$($(1)).json\nnasm_STEP_TO_PROG =          impls/nasm/$($(1))\nnim_STEP_TO_PROG =           impls/nim/$($(1))\nobjc_STEP_TO_PROG =          impls/objc/$($(1))\nobjpascal_STEP_TO_PROG =     impls/objpascal/$($(1))\nocaml_STEP_TO_PROG =         impls/ocaml/$($(1))\nperl_STEP_TO_PROG =          impls/perl/$($(1)).pl\nperl6_STEP_TO_PROG =         impls/perl6/$($(1)).pl\nphp_STEP_TO_PROG =           impls/php/$($(1)).php\npicolisp_STEP_TO_PROG =      impls/picolisp/$($(1)).l\npike_STEP_TO_PROG =          impls/pike/$($(1)).pike\nplpgsql_STEP_TO_PROG =       impls/plpgsql/$($(1)).sql\nplsql_STEP_TO_PROG =         impls/plsql/$($(1)).sql\npowershell_STEP_TO_PROG =    impls/powershell/$($(1)).ps1\nprolog_STEP_TO_PROG =        impls/prolog/$($(1)).pl\nps_STEP_TO_PROG =            impls/ps/$($(1)).ps\npurs_STEP_TO_PROG =          impls/purs/$($(1)).js\npython_STEP_TO_PROG =        impls/python/$($(1)).py\npython.2_STEP_TO_PROG =      impls/python.2/$($(1)).py\nr_STEP_TO_PROG =             impls/r/$($(1)).r\nracket_STEP_TO_PROG =        impls/racket/$($(1)).rkt\nrexx_STEP_TO_PROG =          impls/rexx/$($(1)).rexxpp\nrpython_STEP_TO_PROG =       impls/rpython/$($(1))\nruby_STEP_TO_PROG =          impls/ruby/$($(1)).rb\nruby.2_STEP_TO_PROG =        impls/ruby.2/$($(1)).rb\nrust_STEP_TO_PROG =          impls/rust/$($(1))\nscala_STEP_TO_PROG =         impls/scala/target/scala-2.11/classes/$($(1)).class\nscheme_STEP_TO_PROG =        $(scheme_STEP_TO_PROG_$(scheme_MODE))\nskew_STEP_TO_PROG =          impls/skew/$($(1)).js\nsml_STEP_TO_PROG =           impls/sml/$($(1))\nswift_STEP_TO_PROG =         impls/swift/$($(1))\nswift3_STEP_TO_PROG =        impls/swift3/$($(1))\nswift4_STEP_TO_PROG =        impls/swift4/$($(1))\nswift5_STEP_TO_PROG =        impls/swift5/$($(1))\ntcl_STEP_TO_PROG =           impls/tcl/$($(1)).tcl\nts_STEP_TO_PROG =            impls/ts/$($(1)).js\ntsbun_STEP_TO_PROG =         impls/tsbun/$($(1)).ts\nvala_STEP_TO_PROG =          impls/vala/$($(1))\nvb_STEP_TO_PROG =            impls/vb/$($(1)).exe\nvhdl_STEP_TO_PROG =          impls/vhdl/$($(1))\nvimscript_STEP_TO_PROG =     impls/vimscript/$($(1)).vim\nwasm_STEP_TO_PROG =          impls/wasm/$($(1)).$(if $(filter lucet,$(wasm_MODE)),so,wasm)\nwren_STEP_TO_PROG =          impls/wren/$($(1)).wren\nyorick_STEP_TO_PROG =        impls/yorick/$($(1)).i\nxslt_STEP_TO_PROG =          impls/xslt/$($(1))\nzig_STEP_TO_PROG =           impls/zig/$($(1))\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../Makefile.impls b/../../Makefile.impls
--- a/../../Makefile.impls	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ b/../../Makefile.impls	(date 1721316138919)
@@ -34,7 +34,7 @@
 # Implementation specific settings
 #
 
-IMPLS = ada ada.2 awk bash basic bbc-basic c c.2 chuck clojure coffee common-lisp cpp crystal cs d dart \
+IMPLS = ada ada.2 awk bash basic bbc-basic bun c c.2 chuck clojure coffee common-lisp cpp crystal cs d dart \
 	elisp elixir elm erlang es6 factor fantom fennel forth fsharp go groovy gnu-smalltalk \
 	guile haskell haxe hy io janet java java-truffle js jq julia kotlin livescript logo lua make mal \
 	matlab miniMAL nasm nim objc objpascal ocaml perl perl6 php picolisp pike plpgsql \
@@ -110,6 +110,7 @@
 bash_STEP_TO_PROG =          impls/bash/$($(1)).sh
 basic_STEP_TO_PROG =         $(basic_STEP_TO_PROG_$(basic_MODE))
 bbc-basic_STEP_TO_PROG =     impls/bbc-basic/$($(1)).bas
+bun_STEP_TO_PROG =           impls/bun/$($(1)).ts
 c_STEP_TO_PROG =             impls/c/$($(1))
 c.2_STEP_TO_PROG =           impls/c.2/$($(1))
 chuck_STEP_TO_PROG =         impls/chuck/$($(1)).ck
Index: ../../IMPLS.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>IMPL:\n  - {IMPL: ada}\n  - {IMPL: ada.2}\n  - {IMPL: awk}\n  - {IMPL: bash, NO_SELF_HOST: 1}  # step8 timeout\n  - {IMPL: basic, basic_MODE: cbm, NO_SELF_HOST: 1}  # step4 OOM\n  - {IMPL: basic, basic_MODE: qbasic, NO_SELF_HOST: 1}  # step4 OOM\n  - {IMPL: bbc-basic}\n  - {IMPL: c}\n  - {IMPL: c.2}\n  - {IMPL: cpp}\n  - {IMPL: coffee}\n  - {IMPL: cs}\n  - {IMPL: chuck, NO_SELF_HOST_PERF: 1}  # perf OOM\n  - {IMPL: clojure, clojure_MODE: clj}\n  - {IMPL: clojure, clojure_MODE: cljs}\n  - {IMPL: common-lisp}\n  - {IMPL: crystal}\n  - {IMPL: d, d_MODE: gdc}\n  - {IMPL: d, d_MODE: ldc2}\n  - {IMPL: d, d_MODE: dmd}\n  - {IMPL: dart}\n  - {IMPL: elisp}\n  - {IMPL: elixir}\n  - {IMPL: elm}\n  - {IMPL: erlang, NO_SELF_HOST: 1}  # step8 OOM\n  - {IMPL: es6}\n  - {IMPL: factor}\n  - {IMPL: fantom}\n  - {IMPL: fennel}\n  - {IMPL: forth}\n  - {IMPL: fsharp}\n  - {IMPL: go}\n  - {IMPL: groovy}\n  - {IMPL: gnu-smalltalk}\n  - {IMPL: guile}\n  - {IMPL: haskell}\n  - {IMPL: haxe, haxe_MODE: neko}\n  - {IMPL: haxe, haxe_MODE: python}\n  - {IMPL: haxe, haxe_MODE: cpp, SLOW: 1}\n  - {IMPL: haxe, haxe_MODE: js}\n  - {IMPL: hy}\n  - {IMPL: io, NO_SELF_HOST_PERF: 1}  # perf OOM\n  - {IMPL: janet}\n  - {IMPL: java}\n  - {IMPL: java-truffle}\n  - {IMPL: jq}\n  - {IMPL: js}\n  - {IMPL: julia}\n  - {IMPL: kotlin}\n  - {IMPL: livescript}\n  - {IMPL: logo, NO_SELF_HOST: 1}  # step4 timeout\n  - {IMPL: lua}\n  - {IMPL: make, NO_SELF_HOST: 1}  # step4 timeout\n  - {IMPL: mal, MAL_IMPL: js,      BUILD_IMPL: js,  NO_SELF_HOST: 1}\n  - {IMPL: mal, MAL_IMPL: js-mal,  BUILD_IMPL: js,  NO_SELF_HOST: 1, NO_PERF: 1, SLOW: 1}\n  - {IMPL: mal, MAL_IMPL: nim,     BUILD_IMPL: nim, NO_SELF_HOST: 1}\n  - {IMPL: mal, MAL_IMPL: nim-mal, BUILD_IMPL: nim, NO_SELF_HOST: 1, NO_PERF: 1, SLOW: 1}\n  - {IMPL: matlab, NO_SELF_HOST_PERF: 1}  # Octave, perf timeout\n  - {IMPL: miniMAL, NO_SELF_HOST_PERF: 1, SLOW: 1}  # perf timeout\n  - {IMPL: nasm, NO_SELF_HOST_PERF: 1}  # perf OOM\n  - {IMPL: nim}\n  - {IMPL: objpascal}\n  - {IMPL: objc}\n  - {IMPL: ocaml}\n  - {IMPL: perl}\n  - {IMPL: perl6}\n  - {IMPL: php}\n  - {IMPL: picolisp}\n  - {IMPL: pike}\n  - {IMPL: plpgsql, NO_SELF_HOST: 1, SLOW: 1}  # step3 timeout\n# - {IMPL: plsql}\n  - {IMPL: prolog}\n  - {IMPL: ps}\n  - {IMPL: powershell, NO_SELF_HOST_PERF: 1}\n  - {IMPL: purs}\n  - {IMPL: python, python_MODE: python2}\n  - {IMPL: python, python_MODE: python3}\n  - {IMPL: python.2}\n  - {IMPL: r}\n  - {IMPL: racket}\n  - {IMPL: rexx}\n  - {IMPL: rpython, SLOW: 1}\n  - {IMPL: ruby}\n  - {IMPL: ruby.2}\n  - {IMPL: rust}\n  - {IMPL: scala}\n  - {IMPL: scheme, scheme_MODE: chibi}\n  - {IMPL: scheme, scheme_MODE: kawa}\n  - {IMPL: scheme, scheme_MODE: gauche}\n  - {IMPL: scheme, scheme_MODE: chicken}\n  - {IMPL: scheme, scheme_MODE: sagittarius}\n  - {IMPL: scheme, scheme_MODE: cyclone}\n# - {IMPL: scheme, scheme_MODE: foment}\n  - {IMPL: skew}\n  - {IMPL: sml, sml_MODE: polyml}\n  - {IMPL: sml, sml_MODE: mlton}\n  - {IMPL: sml, sml_MODE: mosml}\n  - {IMPL: tcl}\n  - {IMPL: ts}\n  - {IMPL: tsbun}\n  - {IMPL: vala}\n  - {IMPL: vb}\n  - {IMPL: vhdl, NO_SELF_HOST_PERF: 1}  # perf timeout\n  - {IMPL: vimscript}\n  # no self-host perf for wasm due to mac stack overflow\n  - {IMPL: wasm, wasm_MODE: wasmtime,  NO_SELF_HOST_PERF: 1, NO_PERF: 1}\n  - {IMPL: wasm, wasm_MODE: wasmer,    NO_SELF_HOST_PERF: 1, NO_PERF: 1}\n  - {IMPL: wasm, wasm_MODE: lucet,     NO_SELF_HOST_PERF: 1, NO_PERF: 1}\n  #- {IMPL: wasm, wasm_MODE: wax,       NO_SELF_HOST_PERF: 1}  # Hangs on GH Actions\n  - {IMPL: wasm, wasm_MODE: node,      NO_SELF_HOST_PERF: 1, NO_PERF: 1}\n  #- {IMPL: wasm, wasm_MODE: warpy,     NO_SELF_HOST_PERF: 1}  # Hangs on GH Actions\n  #- {IMPL: wasm, wasm_MODE: wace_libc, NO_SELF_HOST_PERF: 1}  # Hangs on GH Actions\n  - {IMPL: wren}\n  - {IMPL: xslt}\n  - {IMPL: yorick}\n  - {IMPL: zig}\n\n  # See .travis.yml (for older osx / xcode tests)\n# - {IMPL: objc, NO_DOCKER: 1, OS: xcode7}}\n# - {IMPL: swift,  NO_DOCKER: 1, OS: xcode7.3}}\n# - {IMPL: swift3, NO_DOCKER: 1, OS: xcode8}}\n# - {IMPL: swift4, NO_DOCKER: 1, OS: xcode10}}\n  - {IMPL: swift5, NO_DOCKER: 1, OS: macos}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../IMPLS.yml b/../../IMPLS.yml
--- a/../../IMPLS.yml	(revision c4fcc2f4aa9ebc6a34d721e722fc485c79feacf3)
+++ b/../../IMPLS.yml	(date 1721316200888)
@@ -6,6 +6,7 @@
   - {IMPL: basic, basic_MODE: cbm, NO_SELF_HOST: 1}  # step4 OOM
   - {IMPL: basic, basic_MODE: qbasic, NO_SELF_HOST: 1}  # step4 OOM
   - {IMPL: bbc-basic}
+  - {IMPL: bun}
   - {IMPL: c}
   - {IMPL: c.2}
   - {IMPL: cpp}
