// Generated from /home/tim/dev/mal/impls/tsbun/tisp.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class tispLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly ID = 7;
	public static readonly LABEL = 8;
	public static readonly NUMBER = 9;
	public static readonly STRING = 10;
	public static readonly ESC = 11;
	public static readonly OP = 12;
	public static readonly WS = 13;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'('", 
                                                            "')'", "'['", 
                                                            "']'", "'{'", 
                                                            "'}'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, "ID", 
                                                             "LABEL", "NUMBER", 
                                                             "STRING", "ESC", 
                                                             "OP", "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "ID", "LABEL", "NUMBER", 
		"STRING", "ESC", "OP", "WS",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, tispLexer._ATN, tispLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "tisp.g4"; }

	public get literalNames(): (string | null)[] { return tispLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return tispLexer.symbolicNames; }
	public get ruleNames(): string[] { return tispLexer.ruleNames; }

	public get serializedATN(): number[] { return tispLexer._serializedATN; }

	public get channelNames(): string[] { return tispLexer.channelNames; }

	public get modeNames(): string[] { return tispLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,13,136,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,
	4,1,5,1,5,1,6,4,6,41,8,6,11,6,12,6,42,1,6,5,6,46,8,6,10,6,12,6,49,9,6,1,
	7,1,7,1,7,1,8,3,8,55,8,8,1,8,5,8,58,8,8,10,8,12,8,61,9,8,1,8,3,8,64,8,8,
	1,8,4,8,67,8,8,11,8,12,8,68,1,9,1,9,1,9,5,9,74,8,9,10,9,12,9,77,9,9,1,9,
	1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
	11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,119,8,11,1,12,4,
	12,122,8,12,11,12,12,12,123,1,12,1,12,5,12,128,8,12,10,12,12,12,131,9,12,
	3,12,133,8,12,1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
	19,10,21,11,23,12,25,13,1,0,9,3,0,65,90,95,95,97,122,8,0,33,33,42,42,45,
	45,48,57,63,63,65,90,95,95,97,122,1,0,48,57,2,0,34,34,92,92,8,0,34,34,47,
	47,92,92,98,98,102,102,110,110,114,114,116,116,6,0,37,37,42,43,45,45,47,
	47,61,61,94,94,3,0,38,38,124,124,126,126,4,0,9,10,13,13,32,32,44,44,2,0,
	10,10,13,13,163,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
	0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
	21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,
	0,0,7,33,1,0,0,0,9,35,1,0,0,0,11,37,1,0,0,0,13,40,1,0,0,0,15,50,1,0,0,0,
	17,54,1,0,0,0,19,70,1,0,0,0,21,80,1,0,0,0,23,118,1,0,0,0,25,132,1,0,0,0,
	27,28,5,40,0,0,28,2,1,0,0,0,29,30,5,41,0,0,30,4,1,0,0,0,31,32,5,91,0,0,
	32,6,1,0,0,0,33,34,5,93,0,0,34,8,1,0,0,0,35,36,5,123,0,0,36,10,1,0,0,0,
	37,38,5,125,0,0,38,12,1,0,0,0,39,41,7,0,0,0,40,39,1,0,0,0,41,42,1,0,0,0,
	42,40,1,0,0,0,42,43,1,0,0,0,43,47,1,0,0,0,44,46,7,1,0,0,45,44,1,0,0,0,46,
	49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,14,1,0,0,0,49,47,1,0,0,0,50,51,
	5,58,0,0,51,52,3,13,6,0,52,16,1,0,0,0,53,55,5,45,0,0,54,53,1,0,0,0,54,55,
	1,0,0,0,55,63,1,0,0,0,56,58,7,2,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,
	0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,59,1,0,0,0,62,64,5,46,0,0,63,59,1,
	0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,67,7,2,0,0,66,65,1,0,0,0,67,68,1,0,
	0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,18,1,0,0,0,70,75,5,34,0,0,71,74,3,21,
	10,0,72,74,8,3,0,0,73,71,1,0,0,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,
	0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,34,0,0,79,20,1,0,
	0,0,80,81,5,92,0,0,81,82,7,4,0,0,82,22,1,0,0,0,83,119,7,5,0,0,84,85,5,33,
	0,0,85,119,5,61,0,0,86,119,5,60,0,0,87,88,5,60,0,0,88,119,5,61,0,0,89,119,
	5,62,0,0,90,91,5,62,0,0,91,119,5,61,0,0,92,93,5,38,0,0,93,119,5,38,0,0,
	94,95,5,124,0,0,95,119,5,124,0,0,96,119,5,33,0,0,97,98,5,45,0,0,98,119,
	5,62,0,0,99,100,5,45,0,0,100,101,5,45,0,0,101,102,5,62,0,0,102,119,5,62,
	0,0,103,104,5,43,0,0,104,119,5,43,0,0,105,106,5,45,0,0,106,119,5,45,0,0,
	107,108,5,60,0,0,108,119,5,60,0,0,109,110,5,62,0,0,110,119,5,62,0,0,111,
	112,5,62,0,0,112,113,5,62,0,0,113,119,5,62,0,0,114,115,5,60,0,0,115,116,
	5,60,0,0,116,119,5,60,0,0,117,119,7,6,0,0,118,83,1,0,0,0,118,84,1,0,0,0,
	118,86,1,0,0,0,118,87,1,0,0,0,118,89,1,0,0,0,118,90,1,0,0,0,118,92,1,0,
	0,0,118,94,1,0,0,0,118,96,1,0,0,0,118,97,1,0,0,0,118,99,1,0,0,0,118,103,
	1,0,0,0,118,105,1,0,0,0,118,107,1,0,0,0,118,109,1,0,0,0,118,111,1,0,0,0,
	118,114,1,0,0,0,118,117,1,0,0,0,119,24,1,0,0,0,120,122,7,7,0,0,121,120,
	1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,133,1,0,0,0,
	125,129,5,59,0,0,126,128,8,8,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,
	1,0,0,0,129,130,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,132,121,1,0,0,0,
	132,125,1,0,0,0,133,134,1,0,0,0,134,135,6,12,0,0,135,26,1,0,0,0,13,0,42,
	47,54,59,63,68,73,75,118,123,129,132,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!tispLexer.__ATN) {
			tispLexer.__ATN = new ATNDeserializer().deserialize(tispLexer._serializedATN);
		}

		return tispLexer.__ATN;
	}


	static DecisionsToDFA = tispLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}